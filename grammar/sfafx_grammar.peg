{
  if( typeof SFAFx == "undefined" || SFAFx == null ){
    console.log( "!SFAFx required to decode");
  }
  var sfafxdict = SFAFx.dictionary;
  var FIRSTX = parseInt("A00",16);

  function clone(obj){
    return JSON.parse(JSON.stringify(obj));
  }

  function dict( cls, type, subtype ){
   if( !sfafxdict.hasOwnProperty(cls) ) return { 'error':cls + " " + type + " " + subtype };
   var dictcls = sfafxdict[cls];
   if( !dictcls.hasOwnProperty(type) ) return { 'error':cls + " " + type + " " + subtype };
   var dicttype = dictcls[type];
   if( subtype == null || subtype == undefined ){
     return clone(dicttype);
   }
   if( !dicttype.hasOwnProperty(subtype) ) return { 'error':cls + " " + type + " " + subtype };
   var obj = dicttype[subtype];
   return clone(obj);
  }

  function makeRecord( val, entry, occur, text ){
    val["sfaf"] = {};
    if( occur == null ){
       val["sfaf"][entry] = { entry: text };
    } else {
      val["sfaf"][entry] = {};
      val["sfaf"][entry]["occur"] = {};
      val["sfaf"][entry]["occur"][occur] = { entry: text };
    }
    return val;
  }

  function makeSubRecord( val, entry, occur, text, key ){
    var sub = occur;
    if( sub == null ) sub = "01";
    var obj = {};
    obj[sub] = val;
    var rec = {};
    rec[key] = obj;
    return makeRecord( rec, entry, occur, text );
 }

  function mergeObj( target, source ){
    for (var attrname in source) {
      // existing properties become order dependent arrays
      if( target.hasOwnProperty(attrname) ){
        if( !Array.isArray(target[attrname]) ){
          if( target[attrname] instanceof Object ) {
            target[attrname] = mergeObj(target[attrname],source[attrname]);
          }else{
            target[attrname] = [target[attrname]].concat(source[attrname]);
          }
        }else{
          target[attrname] = target[attrname].concat(source[attrname]);
        }
      } else {
        target[attrname] = source[attrname];
      }
    }
    return target;
  }

  function merge( obj, entries ){
    if( entries == null ) return obj;
    var i = 0, len = entries.length;
    for(; i < len; i++ ){
      mergeObj(obj, entries[i] );
    }
    return obj;
  }

  //Frequency multiples for normalizing frequency to megahertz
  var freqMultiple = { 'K': 0.001, 'M': 1.0, 'G':1000.0, 'T':1000000.0 }
  var dms = /([0-9]{2})([0-9]{2})([0-9X]{2})([nsNS])([0-9]{3})([0-9]{2})([0-9X]{2})([ewEW])/
  var regCenterF = /([KMGT])([\.0-9]+)/;
  var regBand = /([KMGT])([\.0-9]+)\-([KMGT])([\.0-9]+)/;
  var regDefBand = /([KMGT])([\.0-9]+)\-([\.0-9]+)/;
  var regRejF = /([KMGT])([\.0-9]+)\(([\.0-9]+)\)/;
  var regRadius = /([0-9]+)([BTbt])?.*/;

  var recs = [];
  var rec = {};

  var dmsToDD = function(dms){
  var sign = 1.0;
  if( dms["dir"] == "S" || dms["dir"] == "W" ){
    sign = -1.0;
  }
  var dd = dms["min"]*60.0 + dms["sec"];
  dd = sign * (dms["deg"] + dd/3600.0);
  return dd
  }

  var parseDMS = function(e){
    try {
    var d = dms.exec(e);
    d[2] = d[2].replace("X","0");
    d[6] = d[6].replace("X","0");
    var latlon = {
      "lat": {
        "deg": parseInt(d[1]), "min": parseInt(d[2]), "sec":parseInt(d[3]), "dir": d[4].toUpperCase()
      },
      "lon": {
        "deg": parseInt(d[5]), "min": parseInt(d[6]), "sec":parseInt(d[7]), "dir": d[8].toUpperCase()
      }
    }
     latlon['lat']['dec'] = dmsToDD(latlon['lat'])
     latlon['lon']['dec'] = dmsToDD(latlon['lon'])
     latlon['coord'] = [latlon['lat']['dec'],latlon['lon']['dec']];
     return latlon
    }catch(e){
     return { "error": e + "" };
    }
   };

   var onDMS = function(entry,rec){
      rec['latlon'] = parseDMS(entry["entry"])
   }

   var onRadius = function(r){
   try{
      var rk = regRadius.exec(r);
      if( rk == null ){
        return;
      }
      return parseInt(rk[1],10);
    }catch(e){
      return { "error": e + "" };
    }
   }

   var onFreq = function(entry){
   try{
    var band = regBand.exec(entry);
    var f = 0.0;
    var freqs = {};
    if( band == null ){
      band = regDefBand.exec(entry);
      if( band == null ){
       var band = regRejF.exec(entry);
       if( band == null ){
         band = regCenterF.exec(entry);
         if( band == null ){
           return res;
         }
       }
       freqs["frequency"] = freqMultiple[band[1]] * parseFloat(band[2]);
       if( band.length > 3 ){
         freqs["rejected"] = freqMultiple[band[1]] * parseFloat(band[3]);
       }
     }else{
       var mult = freqMultiple[band[1]];
       freqs["low"] = mult * parseFloat(band[2]);
       freqs["high"] = mult * parseFloat(band[3]);
       freqs["band"] = freqs["low"] + "," + freqs["high"];
     }
   }else{
     var mult = freqMultiple[band[1]];
     freqs["low"] = mult * parseFloat(band[2]);
     freqs["high"] = mult * parseFloat(band[3]);
     freqs["band"] = freqs["low"] + "," + freqs["high"];
    }
    return freqs;
    }catch(e){
      return { "error": e + "" };
    }
  }
}

start =
  recs:record* (ws / eol)* { return recs; }

record =
  cls:line005 lines:notline005*
  { return merge(cls,lines); }

notline005 = !line005 l:line { return l; }

line005 =
  "005." ws cls:linetext eol
  { return makeRecord( {classification:cls}, "005", null, cls ); }

transmitter =
   line303 /
   line306

line102 =
  item:"102." ws t:linetext eol
  { var obj = { serial:t};
    return makeRecord( obj, "102", null, t ); }

docket =
  line103Orig /
  line10302 /
  line103Docket

line103Orig =
  item:"103." ws t:linetext eol
  { var obj = { docket:{ current: t } };
    return makeRecord( obj, "103", null, t ); }

line10302 =
  item:"103/02." ws t:linetext eol
  { var obj = { docket:{ original: t } };
    return makeRecord( obj, "103", "02", t ); }

line103Docket =
  item:"103" s:sub "." ws t:linetext eol
  { var obj = { docket: { previous:t } };
    return makeRecord( obj, "103", s, t );   }

line107 =
  item:"107." ws t:yyyymmdd ws? eol
  { var obj = { authorization:t};
    return makeRecord( obj, "107", null, t.text ); }

line110 =
  "110." ws t:linetext eol
    { var obj = { transmitter: { freqband:onFreq(t) } };
      return makeRecord( obj, "110", null, t ); }

line111 =
  "111" s:sub? "." ws t:linetext eol
    { var obj = { transmitter: { excludedband:onFreq(t) } };
      return makeRecord( obj, "110", s, t ); }

emission =
  line113 /
  line114 /
  line115

line113 =
  "113" s:sub? "." ws t:linetext eol
    { var obj = { stationclass:t };
      return makeSubRecord( obj, "113", s, t, "transmitter" ); }

line114 =
  "114" s:sub? "." ws emission:emissiondesignator ws? eol
    { var obj = { emissiondesignator:emission.designator };
      return makeSubRecord( obj, "114", s, emission.text, "transmitter" ); }

line115 =
  "115" s:sub? "." ws t:linetext eol
    { var obj = { power:t };
      return makeSubRecord( obj, "115", s, t, "transmitter" ); }

line303 =
  "303." ws t:linetext eol
  { var latlon = { transmitter:{location:parseDMS(t)} };
    return makeRecord( latlon, "303", null, t ); }

line306 =
  "306." ws t:linetext eol
    { var obj = { transmitter:{ location:{radius:onRadius(t)}}};
      return makeRecord( obj, "306", null, t ); }

txantennas =
  line354 /
  line355 /
  line356 /
  line357 /
  line358 /
  line359 /
  line360 /
  line361 /
  line362 /
  line363

line354 =
  "354" s:sub? "." ws t:linetext eol
    {  return makeSubRecord( { name: t }, "354", s, t, "txantennas" ); }

line355 =
  "355" s:sub? "." ws t:linetext eol
    {  return makeSubRecord( { nomenclature:t }, "355", s, t, "txantennas" ); }

line356 =
  "356" s:sub? "." ws t:number eol
    {  return makeSubRecord( { height: parseFloat(t) }, "356", s, t, "txantennas" ); }

line357 =
  "357" s:sub? "." ws t:number eol
    {  return makeSubRecord( { gain: t }, "357", s, t, "txantennas" ); }

line358 =
  "358" s:sub? "." ws t:number eol
    {  return makeSubRecord( { elevation: parseFloat(t) }, "358", s, t, "txantennas" ); }

line359 =
  "359" s:sub? "." ws t:number eol
    {  return makeSubRecord( {feedpointheight:parseFloat(t)}, "359", s, t, "txantennas" ); }

line360 =
  "360" s:sub? "." ws t:number eol
    {  return makeSubRecord( {beamwidth:{horizontal:parseFloat(t)}}, "360", s, t, "txantennas" ); }

line361 =
  "361" s:sub? "." ws t:number eol
    {  return makeSubRecord( {beamwidth:{vertical:parseFloat(t)}}, "361", s, t, "txantennas" ); }

line362 =
  "362" s:sub? "." ws t:linetext eol
    {  return makeSubRecord( { orientation:t }, "362", s, t, "txantennas" ); }

line363 =
  "363" s:sub? "." ws t:linetext eol
    {  return makeSubRecord( { polarization: dict("antenna","polarization",t) }, "363", s, t, "txantennas" ); }

receivers =
  line400 /
  line401 /
  line402 /
  line403 /
  line404 /
  line406 /
  line443

line400 =
  "400" s:sub? "." ws t:linetext eol
    {  return makeSubRecord( { stateloc: t }, "400", s, t, "receivers" ); }

line401 =
  "401" s:sub? "." ws t:linetext eol
    {  return makeSubRecord( { antennaloc: t }, "401", s, t, "receivers" ); }

line402 =
  "402" s:sub? "." ws t:linetext eol
    {  return makeSubRecord( { control: t }, "402", s, t, "receivers" ); }

line403 =
  "403" s:sub? "." ws t:linetext eol
    {  return makeSubRecord( {location:parseDMS(t)}, "403", s, t, "receivers" ); }

line404 =
  "404" s:sub? "." ws t:linetext eol
    {  return makeSubRecord( {callsign:t}, "404", s, t, "receivers" ); }

line406 =
  "406" s:sub? "." ws t:linetext eol
    {  return makeSubRecord( { radius: onRadius(t) }, "406", s, t, "receivers" ); }

line443 =
  item:"443" s:sub? "." ws t:linetext eol
  {  return makeSubRecord( { equipmentcertid:t }, "443", s, t, "receivers" ); }

rxantennas =
  line454 /
  line455 /
  line456 /
  line457 /
  line458 /
  line459 /
  line460 /
  line461 /
  line462 /
  line463

line454 =
  "454" s:sub? "." ws t:linetext eol
    {  return makeSubRecord( { name: t }, "454", s, t, "rxantennas" ); }

line455 =
  "455" s:sub? "." ws t:linetext eol
    {  return makeSubRecord( { nomenclature:t }, "455", s, t, "rxantennas" ); }

line456 =
  "456" s:sub? "." ws t:number eol
    {  return makeSubRecord( { height: parseFloat(t) }, "456", s, t, "rxantennas" ); }

line457 =
  "357" s:sub? "." ws t:number eol
    {  return makeSubRecord( { gain: t }, "457", s, t, "rxantennas" ); }

line458 =
  "358" s:sub? "." ws t:number eol
    {  return makeSubRecord( { elevation: parseFloat(t) }, "458", s, t, "rxantennas" ); }

line459 =
  "459" s:sub? "." ws t:number eol
    {  return makeSubRecord( {feedpointheight:parseFloat(t)}, "459", s, t, "rxantennas" ); }

line460 =
  "460" s:sub? "." ws t:number eol
    {  return makeSubRecord( {beamwidth:{horizontal:parseFloat(t)}}, "460", s, t, "rxantennas" ); }

line461 =
  "461" s:sub? "." ws t:number eol
    {  return makeSubRecord( {beamwidth:{vertical:parseFloat(t)}}, "461", s, t, "rxantennas" ); }

line462 =
  "462" s:sub? "." ws t:linetext eol
    {  return makeSubRecord( { orientation:t }, "462", s, t, "rxantennas" ); }

line463 =
  "463" s:sub? "." ws t:linetext eol
    {  return makeSubRecord( { polarization: dict("antenna","polarization",t) }, "463", s, t, "rxantennas" ); }

linkages = line199

line199 =
  item:"199" s:sub? "." ws link:linkage eol
  {  return makeSubRecord( { link:link.link }, "199", s, link.text, "linkage" ); }

//199/2.   T/02(A/02)R00[TR]R/02(A/01)R05(E/01,E/03)
linkage =
  linkall /
  linkagetxrx /
  linkagetx /
  linkagerx

linkagetxrx =
  tx:linktxnode dir:linkdir rx:linkrxnode
  { return { text: tx.text+dir.text+rx.text+ed.text,
      link: { txconfig:tx.config, dir:dir.dir, rxconfig:rx.config } } }

linkall = "ALL" { return { text: "ALL",
    link: { txconfig: {equipment:"ALL", antenna:"ALL", location:"ALL", emission:"ALL"} ,
            dir:"txrx",
            rxconfig: {equipment:"ALL", antenna:"ALL", location:"ALL", emission:"ALL"} } }}

linkagetx =
  tx:linktxnode "[T]" { return { text:tx.text+"[T]", config:tx.ed } }

linkagerx =
  rx:linkrxnode "[R]" { return { text:rx.text+"[R]", config:rx.ed } }

linktxnode = tx:linkrxtx "(" ant:linkant ")" loc:linkloc
  { return { text: tx.text + "(" + ant.text + ")" + loc.text, config:{ tx:tx.ed, ant:ant.ed, loc:loc.ed } }; }

linkrxnode = rx:linkrxtx "(" ant:linkant ")" loc:linkloc
  { return { text: rx.text + "(" + ant.text + ")" + loc.text, config:{ rx:rx.ed, ant:ant.ed, loc:loc.ed } }; }

linkrxtx = linkrx / linktx

linkrx =
  "R/" ed:linklist { return { text:"R/" + ed, ed:ed }; }

linktx =
  "T/" ed:linklist { return { text:"T/" + ed, ed:ed }; }

linkant =
  "A/" ed:linklist { return { text:"A/" + ed, ed:ed }; }

linkloc = "R" loc:int2 { return { text:"R"+loc, ed:loc }; }

linkdir =
  "[T]" { return { text:"[T]", dir:"tx" }; } /
  "[R]" { return { text:"[R]", dir:"rx" }; } /
  "[B]" { return { text:"[B]", dir:"txrx" }; }

linkemission =
  "(E/" ed:linklist ")" { return { text:"(E/" + ed + ")", ed:ed }; }

linklist =
  "XX" { return "XX"; } /
  elm:linkelem { return elm; } /
  first:linkelem + rest:("," linkelem)+ { return first.join("") + rest.join(""); }

linkelem =
  num:integer { return num; } /
  low:integer "-" high:integer { return low.join("") + "-" + high.join(""); }

line =
  line102 /
  docket /
  line107 /
  line110 /
  emission /
  transmitter /
  txantennas /
  receivers /
  rxantennas /
  linkages /
  n:integer s:sub? "." ws t:linetext eol?
  { return makeRecord( {}, n, s, t); } /
  n:integer s:sub? "." ws* eol?
  { return null; } /
  eol { return null; }

xline =
  n:hex s:sub? "." ws t:linetext eol?
  { return makeRecord( {}, n, s, t ); }

sub =
  "/" n:integer { return n; }

subh =
  "/" n:hex { return n; }

eol = [\n]

neol = [^\n]+

ws = [ \t]+

linetext
  = chars:[^\n]+ {return chars.join("").trim();}

int2 = d1:[0-9] d2:[0-9] { return d1+d2; }

int4 = d1:[0-9] d2:[0-9] d3:[0-9] d4:[0-9] { return d1+d2+d3+d4; }

emissiondesignator =
   whole:integer unit:unitdesignator frac:integer cls:emissionclass
   { var t = [whole,unit.text,frac,cls.text].join("");
     var freq = parseInt( whole + "." + frac ) * unit.mult;
     return { text:t, designator: { entry:t, frequency:freq, modulation:cls.modulation } }
   }

emissionclass =
  emissionclass3 /
  emissionclass4 /
  emissionclass5

emissionclass3 =
    type:hex1 nature:hex1 info:hex1
    { return { text: type+nature+info,
        modulation: { type:dict("modulation","modtype",type),
               nature:dict("modulation","modnature",nature),
               information:dict("modulation","modinformation",info) } } }

emissionclass4 =
    type:hex1 nature:hex1 info:hex1 detail:hex1
    { return { text: type+nature+info+detail,
        modulation: { type:dict("modulation","modtype",type),
               nature:dict("modulation","modnature",nature),
               information:dict("modulation","modinformation",info),
               detail:dict("modulation","moddetail",detail)  } } }

emissionclass5 =
    type:hex1 nature:hex1 info:hex1 detail:hex1 mux:hex1
    { return { text: type+nature+info+detail+mux,
        modulation: { type:dict("modulation","modtype",type),
               nature:dict("modulation","modnature",nature),
               information:dict("modulation","modinformation",info),
               detail:dict("modulation","moddetail",detail),
               multiplex:dict("modulation","modmux",mux)  } } }

unitdesignator = unitH / unitK / unitM / unitG

unitH = "H" { return { text:'H', mult:0.000001}; }
unitK = "K" { return { text:'K', mult:0.001}; }
unitM = "M" { return { text:'M', mult:1.0}; }
unitG = "G" { return { text:'G', mult:1000.0}; }
unitT = "T" { return { text:'T', mult:1000000.0}; }

yyyymmdd = yyyy:int4 mm:int2 dd:int2
  { var iyy = parseInt(yyyy), imm = parseInt(mm), idd = parseInt(dd);
    return { text:yyyy+mm+dd, yyyy:iyy, mm:imm, dd:idd, date: new Date(iyy,imm-1,idd,0,0,0) }; }

number "number"
  = float / integer

integer "integer"
  = digits:[0-9]+ { return digits.join(""); }

float "float"
  = digits:[0-9]+ "." frac:[0-9]+ { return digits.join("") + "." + frac.join(""); }

hex1 = [A-Z0-9]

hex "hex"
  = hexdigit:[a-zA-Z] digits:[a-zA-Z0-9]* { return hexdigit+digits.join(""); }
