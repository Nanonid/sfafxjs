//SFAFxJS https://github.com/Sciumo/sfafxjs

sfafx_parser = (function() {
  "use strict";

  /*
   * Generated by PEG.js 0.9.0.
   *
   * http://pegjs.org/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function peg$SyntaxError(message, expected, found, location) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.location = location;
    this.name     = "SyntaxError";

    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, peg$SyntaxError);
    }
  }

  peg$subclass(peg$SyntaxError, Error);

  function peg$parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},
        parser  = this,

        peg$FAILED = {},

        peg$startRuleFunctions = { start: peg$parsestart },
        peg$startRuleFunction  = peg$parsestart,

        peg$c0 = function(cls, lines) { return merge(cls,lines); },
        peg$c1 = function(l) { return l; },
        peg$c2 = "005.",
        peg$c3 = { type: "literal", value: "005.", description: "\"005.\"" },
        peg$c4 = function(cls) { return makeRecord( {classification:cls}, "005", null, cls ); },
        peg$c5 = "102",
        peg$c6 = { type: "literal", value: "102", description: "\"102\"" },
        peg$c7 = ".",
        peg$c8 = { type: "literal", value: ".", description: "\".\"" },
        peg$c9 = function(item, t) { var obj = { serial:t};
            return makeRecord( obj, item, null, t ); },
        peg$c10 = "303.",
        peg$c11 = { type: "literal", value: "303.", description: "\"303.\"" },
        peg$c12 = function(t) { var latlon = { transmitter:{location:parseDMS(t)} };
            return makeRecord( latlon, "303", null, t ); },
        peg$c13 = function(n, s, t) { return makeRecord( {}, n, s, t); },
        peg$c14 = function(n, s, t) { return makeRecord( {}, n, s, t ); },
        peg$c15 = "/",
        peg$c16 = { type: "literal", value: "/", description: "\"/\"" },
        peg$c17 = function(n) { return n; },
        peg$c18 = /^[\n]/,
        peg$c19 = { type: "class", value: "[\\n]", description: "[\\n]" },
        peg$c20 = /^[^\n]/,
        peg$c21 = { type: "class", value: "[^\\n]", description: "[^\\n]" },
        peg$c22 = /^[ \t]/,
        peg$c23 = { type: "class", value: "[ \\t]", description: "[ \\t]" },
        peg$c24 = function(chars) {return chars.join("").trim();},
        peg$c25 = { type: "other", description: "integer" },
        peg$c26 = /^[0-9]/,
        peg$c27 = { type: "class", value: "[0-9]", description: "[0-9]" },
        peg$c28 = function(digits) { return digits.join(""); },
        peg$c29 = { type: "other", description: "hex" },
        peg$c30 = /^[a-zA-Z]/,
        peg$c31 = { type: "class", value: "[a-zA-Z]", description: "[a-zA-Z]" },
        peg$c32 = /^[a-zA-Z0-9]/,
        peg$c33 = { type: "class", value: "[a-zA-Z0-9]", description: "[a-zA-Z0-9]" },
        peg$c34 = function(hexdigit, digits) { return hexdigit+digits.join(""); },

        peg$currPos          = 0,
        peg$savedPos         = 0,
        peg$posDetailsCache  = [{ line: 1, column: 1, seenCR: false }],
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$savedPos, peg$currPos);
    }

    function location() {
      return peg$computeLocation(peg$savedPos, peg$currPos);
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        input.substring(peg$savedPos, peg$currPos),
        peg$computeLocation(peg$savedPos, peg$currPos)
      );
    }

    function error(message) {
      throw peg$buildException(
        message,
        null,
        input.substring(peg$savedPos, peg$currPos),
        peg$computeLocation(peg$savedPos, peg$currPos)
      );
    }

    function peg$computePosDetails(pos) {
      var details = peg$posDetailsCache[pos],
          p, ch;

      if (details) {
        return details;
      } else {
        p = pos - 1;
        while (!peg$posDetailsCache[p]) {
          p--;
        }

        details = peg$posDetailsCache[p];
        details = {
          line:   details.line,
          column: details.column,
          seenCR: details.seenCR
        };

        while (p < pos) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }

          p++;
        }

        peg$posDetailsCache[pos] = details;
        return details;
      }
    }

    function peg$computeLocation(startPos, endPos) {
      var startPosDetails = peg$computePosDetails(startPos),
          endPosDetails   = peg$computePosDetails(endPos);

      return {
        start: {
          offset: startPos,
          line:   startPosDetails.line,
          column: startPosDetails.column
        },
        end: {
          offset: endPos,
          line:   endPosDetails.line,
          column: endPosDetails.column
        }
      };
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, found, location) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0100-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1000-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new peg$SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        location
      );
    }

    function peg$parsestart() {
      var s0, s1;

      s0 = [];
      s1 = peg$parserecord();
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$parserecord();
      }

      return s0;
    }

    function peg$parserecord() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseline005();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsenotline005();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsenotline005();
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c0(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsenotline005() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      s2 = peg$parseline005();
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = void 0;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseline();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c1(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseline005() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c2) {
        s1 = peg$c2;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c3); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsews();
        if (s2 !== peg$FAILED) {
          s3 = peg$parselinetext();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseeol();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c4(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseline102() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c5) {
        s1 = peg$c5;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c6); }
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 46) {
          s2 = peg$c7;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c8); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsews();
          if (s3 !== peg$FAILED) {
            s4 = peg$parselinetext();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseeol();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c9(s1, s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseline303() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c10) {
        s1 = peg$c10;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c11); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsews();
        if (s2 !== peg$FAILED) {
          s3 = peg$parselinetext();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseeol();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c12(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseline() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$parseline102();
      if (s0 === peg$FAILED) {
        s0 = peg$parseline303();
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseinteger();
          if (s1 !== peg$FAILED) {
            s2 = peg$parsesub();
            if (s2 === peg$FAILED) {
              s2 = null;
            }
            if (s2 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 46) {
                s3 = peg$c7;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c8); }
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parsews();
                if (s4 !== peg$FAILED) {
                  s5 = peg$parselinetext();
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parseeol();
                    if (s6 === peg$FAILED) {
                      s6 = null;
                    }
                    if (s6 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c13(s1, s2, s5);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }

      return s0;
    }

    function peg$parsexline() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parsehex();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesub();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 46) {
            s3 = peg$c7;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c8); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsews();
            if (s4 !== peg$FAILED) {
              s5 = peg$parselinetext();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseeol();
                if (s6 === peg$FAILED) {
                  s6 = null;
                }
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c14(s1, s2, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsesub() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 47) {
        s1 = peg$c15;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c16); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseinteger();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c17(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsesubh() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 47) {
        s1 = peg$c15;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c16); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsehex();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c17(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseeol() {
      var s0;

      if (peg$c18.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c19); }
      }

      return s0;
    }

    function peg$parseneol() {
      var s0, s1;

      s0 = [];
      if (peg$c20.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c21); }
      }
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          if (peg$c20.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c21); }
          }
        }
      } else {
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsews() {
      var s0, s1;

      s0 = [];
      if (peg$c22.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c23); }
      }
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          if (peg$c22.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c23); }
          }
        }
      } else {
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parselinetext() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      if (peg$c20.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c21); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c20.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c21); }
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c24(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseinteger() {
      var s0, s1, s2;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = [];
      if (peg$c26.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c27); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c26.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c27); }
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c28(s1);
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c25); }
      }

      return s0;
    }

    function peg$parsehex() {
      var s0, s1, s2, s3;

      peg$silentFails++;
      s0 = peg$currPos;
      if (peg$c30.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c31); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c32.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c33); }
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c32.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c33); }
          }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c34(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c29); }
      }

      return s0;
    }


     console.log("SFAFx PEG v0.0.1");

      var FIRSTX = parseInt("A00",16);
      function makeRecord( val, entry, occur, text ){
        val["sfaf"] = {};
        if( occur == null ){
           val["sfaf"][entry] = { entry: text };
        } else {
          val["sfaf"][entry] = {};
          val["sfaf"][entry]["occur"] = {};
          val["sfaf"][entry]["occur"][occur] = { entry: text };
        }
        return val;
      }
      function mergeObj( target, source ){
        for (var attrname in source) {
          // existing properties become order dependent arrays
          if( target.hasOwnProperty(attrname) ){
            if( !Array.isArray(target[attrname]) ){
              if( target[attrname] instanceof Object ) {
                target[attrname] = mergeObj(target[attrname],source[attrname]);
              }else{
                target[attrname] = [target[attrname]].concat(source[attrname]);
              }
            }else{
              target[attrname] = target[attrname].concat(source[attrname]);
            }
          } else {
            target[attrname] = source[attrname];
          }
        }
        return target;
      }
      function merge( obj, entries ){
        if( entries == null ) return obj;
        var i = 0, len = entries.length;
        for(; i < len; i++ ){
          mergeObj(obj, entries[i] );
        }
        return obj;
      }

      //Frequency multiples for normalizing frequency to megahertz
      var freqMultiple = { 'K': 0.001, 'M': 1.0, 'G':1000.0, 'T':1000000.0 }
      var dms = /([0-9]{2})([0-9]{2})([0-9X]{2})([nsNS])([0-9]{3})([0-9]{2})([0-9X]{2})([ewEW])/
      var regCenterF = /([KMGT])([\.0-9]+)/;
      var regBand = /([KMGT])([\.0-9]+)\-([KMGT])([\.0-9]+)/;
      var regDefBand = /([KMGT])([\.0-9]+)\-([\.0-9]+)/;
      var regRejF = /([KMGT])([\.0-9]+)\(([\.0-9]+)\)/;
      var regRadius = /([0-9]+)([BTbt])?.*/;

      var recs = [];
      var rec = {};

      var dmsToDD = function(dms){
      var sign = 1.0;
      if( dms["dir"] == "S" || dms["dir"] == "W" ){
        sign = -1.0;
      }
      var dd = dms["min"]*60.0 + dms["sec"];
      dd = sign * (dms["deg"] + dd/3600.0);
      return dd
      }

      var parseDMS = function(e){
        var d = dms.exec(e);
        d[2] = d[2].replace("X","0");
        d[6] = d[6].replace("X","0");
        var latlon = {
          "lat": {
            "deg": parseInt(d[1]), "min": parseInt(d[2]), "sec":parseInt(d[3]), "dir": d[4].toUpperCase()
          },
          "lon": {
            "deg": parseInt(d[5]), "min": parseInt(d[6]), "sec":parseInt(d[7]), "dir": d[8].toUpperCase()
          }
        }
         latlon['lat']['dec'] = dmsToDD(latlon['lat'])
         latlon['lon']['dec'] = dmsToDD(latlon['lon'])
         latlon['coord'] = [latlon['lat']['dec'],latlon['lon']['dec']];
         return latlon
       };

       var onSerial = function(entry,rec){
         rec["serial"] = entry["entry"];
       }

       var onDMS = function(entry,rec){
          rec['latlon'] = parseDMS(entry["entry"])
       }

       var onRadius = function(entry,rec){
          var r = entry["entry"];
          var rk = regRadius.exec(r);
          if( rk == null ){
            return;
          }
          rec['radius'] = parseInt(rk[1],10);
       }

       var onFreq = function(entry,rec){
        var entry = entry["entry"];
        var band = regBand.exec(entry);
        var f = 0.0;
        var freqs = {};
        if( band == null ){
          band = regDefBand.exec(entry);
          if( band == null ){
           var band = regRejF.exec(entry);
           if( band == null ){
             band = regCenterF.exec(entry);
             if( band == null ){
               return res;
             }
           }
           freqs["frequency"] = freqMultiple[band[1]] * parseFloat(band[2]);
           if( band.length > 3 ){
             freqs["rejected"] = freqMultiple[band[1]] * parseFloat(band[3]);
           }
         }else{
           var mult = freqMultiple[band[1]];
           freqs["low"] = mult * parseFloat(band[2]);
           freqs["high"] = mult * parseFloat(band[3]);
           freqs["band"] = freqs["low"] + "," + freqs["high"];
         }
       }else{
         var mult = freqMultiple[band[1]];
         freqs["low"] = mult * parseFloat(band[2]);
         freqs["high"] = mult * parseFloat(band[3]);
         freqs["band"] = freqs["low"] + "," + freqs["high"];
        }
        rec["freqs"] = freqs;
        return freqs;
      }

      var handlers = {};
      handlers["102"] = onSerial;
      handlers["110"] = onFreq;
      handlers["303"] = onDMS;
      handlers["306"] = onRadius;
      handlers["403"] = onDMS;


    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(
        null,
        peg$maxFailExpected,
        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
        peg$maxFailPos < input.length
          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
      );
    }
  }

  return {
    SyntaxError: peg$SyntaxError,
    parse:       peg$parse
  };
})();
'use strict';

(function(window) {
  var toSortedKeys = function( obj ){
    var keys = [];
    for( var key in obj ){
      if( obj.hasOwnProperty(key) ){
        keys.push(key);
      }
    }
    return keys.sort();
  }
  var toSFAFRec = function( sfafrec ){
    if( sfafrec == null || sfafrec == undefined || !sfafrec.hasOwnProperty('sfaf') ){
      return "";
    }
    var rec = sfafrec.sfaf;
    var keys = toSortedKeys(rec);
    var result = "";
    var idx = 0, len = keys.length;
    for( ; idx < len; idx++ ){
      var key = keys[idx];
      var item = rec[ key ];
      if( item != null && item != undefined ){
        if( item.hasOwnProperty('entry') ){
          var entry = item["entry"];
          if( Array.isArray(entry) ){
            for( var eidx = 0; eidx < entry.length; eidx++ ){
              result += key  + ".     " + entry[eidx] + "\n";
            }
          }else{
            result += key  + ".     " + entry + "\n";
          }
        }
        if( item.hasOwnProperty('occur') ){
          var occur = item['occur'];
          for( var occurkey in occur ){
            var occuritem = occur[occurkey];
            if( occuritem != undefined && occuritem != null && occuritem.hasOwnProperty("entry") ){
              result += key + "/" + occurkey + ".     " + occuritem["entry"] + "\n";
            }
          }
        }
      }
    }
    return result;
  }
  var toSFAF = function(sfaf){
    if( sfaf == null || sfaf == undefined ){
      return null;
    }
    if( !Array.isArray(sfaf) ){
      if( !sfaf.hasOwnProperty('sfaf') ) return null;
      sfaf = sfaf.sfaf;
      if( !Array.isArray(sfaf) ) return null;
    }
    var i = 0, len = sfaf.length;
    var result = "";
    for( ; i < len; i++ ){
      result += toSFAFRec( sfaf[i]);
    }
    return result;
  }
  var toSFAFmodule =   { 'toSFAF':toSFAF, 'toSFAFRec':toSFAFRec };
  if ( typeof module === 'object' && module && typeof module.exports === 'object' ) {
    module.exports = toSFAFmodule;
  } else {
    window.sfafx_toSFAF = toSFAFmodule;
  }
})(this);

(function() {(window.nunjucksPrecompiled = window.nunjucksPrecompiled || {})["sfaf.txt"] = (function() {
function root(env, context, frame, runtime, cb) {
var lineno = null;
var colno = null;
var output = "";
try {
var parentTemplate = null;
if(runtime.contextOrFrameLookup(context, frame, "records") == runtime.contextOrFrameLookup(context, frame, "undefined")) {
output += "\n!ERROR NO RECORDS\n";
;
}
else {
output += "\n";
frame = frame.push();
var t_3 = runtime.contextOrFrameLookup(context, frame, "records");
if(t_3) {var t_2 = t_3.length;
for(var t_1=0; t_1 < t_3.length; t_1++) {
var t_4 = t_3[t_1];
frame.set("rec", t_4);
frame.set("loop.index", t_1 + 1);
frame.set("loop.index0", t_1);
frame.set("loop.revindex", t_2 - t_1);
frame.set("loop.revindex0", t_2 - t_1 - 1);
frame.set("loop.first", t_1 === 0);
frame.set("loop.last", t_1 === t_2 - 1);
frame.set("loop.length", t_2);
output += "\n  ";
frame = frame.push();
var t_7 = runtime.memberLookup((t_4),"sfaf");
if(t_7) {var t_5;
if(runtime.isArray(t_7)) {
var t_6 = t_7.length;
for(t_5=0; t_5 < t_7.length; t_5++) {
var t_8 = t_7[t_5][0]
frame.set("item", t_7[t_5][0]);
var t_9 = t_7[t_5][1]
frame.set("entryO", t_7[t_5][1]);
frame.set("loop.index", t_5 + 1);
frame.set("loop.index0", t_5);
frame.set("loop.revindex", t_6 - t_5);
frame.set("loop.revindex0", t_6 - t_5 - 1);
frame.set("loop.first", t_5 === 0);
frame.set("loop.last", t_5 === t_6 - 1);
frame.set("loop.length", t_6);
output += "\n    ";
if(env.getFilter("length").call(context, runtime.memberLookup((t_9),"entry"))) {
output += "\n      ";
frame = frame.push();
var t_12 = runtime.memberLookup((t_9),"entry");
if(t_12) {var t_11 = t_12.length;
for(var t_10=0; t_10 < t_12.length; t_10++) {
var t_13 = t_12[t_10];
frame.set("txt", t_13);
frame.set("loop.index", t_10 + 1);
frame.set("loop.index0", t_10);
frame.set("loop.revindex", t_11 - t_10);
frame.set("loop.revindex0", t_11 - t_10 - 1);
frame.set("loop.first", t_10 === 0);
frame.set("loop.last", t_10 === t_11 - 1);
frame.set("loop.length", t_11);
output += "\nO ";
output += runtime.suppressValue(t_8, env.opts.autoescape);
output += ".     ";
output += runtime.suppressValue(t_13, env.opts.autoescape);
output += " ";
output += runtime.suppressValue(runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "entry0")),"entry")),"length"), env.opts.autoescape);
output += "\n      ";
;
}
}
frame = frame.pop();
output += "\n    ";
;
}
else {
output += "\nI";
output += runtime.suppressValue(t_8, env.opts.autoescape);
output += ".     ";
output += runtime.suppressValue(runtime.memberLookup((t_9),"entry"), env.opts.autoescape);
output += "\n    ";
;
}
output += "\n    ";
if(runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "entry")),"occur")),"length") > 0) {
output += "\n      ";
frame = frame.push();
var t_16 = runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "entry")),"occur");
if(t_16) {var t_14;
if(runtime.isArray(t_16)) {
var t_15 = t_16.length;
for(t_14=0; t_14 < t_16.length; t_14++) {
var t_17 = t_16[t_14][0]
frame.set("oc", t_16[t_14][0]);
var t_18 = t_16[t_14][1]
frame.set("ocent", t_16[t_14][1]);
frame.set("loop.index", t_14 + 1);
frame.set("loop.index0", t_14);
frame.set("loop.revindex", t_15 - t_14);
frame.set("loop.revindex0", t_15 - t_14 - 1);
frame.set("loop.first", t_14 === 0);
frame.set("loop.last", t_14 === t_15 - 1);
frame.set("loop.length", t_15);
output += "\n        ";
frame = frame.push();
var t_21 = t_18;
if(t_21) {var t_20 = t_21.length;
for(var t_19=0; t_19 < t_21.length; t_19++) {
var t_22 = t_21[t_19];
frame.set("txt", t_22);
frame.set("loop.index", t_19 + 1);
frame.set("loop.index0", t_19);
frame.set("loop.revindex", t_20 - t_19);
frame.set("loop.revindex0", t_20 - t_19 - 1);
frame.set("loop.first", t_19 === 0);
frame.set("loop.last", t_19 === t_20 - 1);
frame.set("loop.length", t_20);
output += "\n";
output += runtime.suppressValue(t_8, env.opts.autoescape);
output += "/";
output += runtime.suppressValue(t_17, env.opts.autoescape);
output += ".     ";
output += runtime.suppressValue(t_22, env.opts.autoescape);
output += "\n        ";
;
}
}
frame = frame.pop();
output += "\n      ";
;
}
} else {
t_14 = -1;
var t_15 = runtime.keys(t_16).length;
for(var t_23 in t_16) {
t_14++;
var t_24 = t_16[t_23];
frame.set("oc", t_23);
frame.set("ocent", t_24);
frame.set("loop.index", t_14 + 1);
frame.set("loop.index0", t_14);
frame.set("loop.revindex", t_15 - t_14);
frame.set("loop.revindex0", t_15 - t_14 - 1);
frame.set("loop.first", t_14 === 0);
frame.set("loop.last", t_14 === t_15 - 1);
frame.set("loop.length", t_15);
output += "\n        ";
frame = frame.push();
var t_27 = t_24;
if(t_27) {var t_26 = t_27.length;
for(var t_25=0; t_25 < t_27.length; t_25++) {
var t_28 = t_27[t_25];
frame.set("txt", t_28);
frame.set("loop.index", t_25 + 1);
frame.set("loop.index0", t_25);
frame.set("loop.revindex", t_26 - t_25);
frame.set("loop.revindex0", t_26 - t_25 - 1);
frame.set("loop.first", t_25 === 0);
frame.set("loop.last", t_25 === t_26 - 1);
frame.set("loop.length", t_26);
output += "\n";
output += runtime.suppressValue(t_8, env.opts.autoescape);
output += "/";
output += runtime.suppressValue(t_23, env.opts.autoescape);
output += ".     ";
output += runtime.suppressValue(t_28, env.opts.autoescape);
output += "\n        ";
;
}
}
frame = frame.pop();
output += "\n      ";
;
}
}
}
frame = frame.pop();
output += "\n    ";
;
}
output += "\n  ";
;
}
} else {
t_5 = -1;
var t_6 = runtime.keys(t_7).length;
for(var t_29 in t_7) {
t_5++;
var t_30 = t_7[t_29];
frame.set("item", t_29);
frame.set("entryO", t_30);
frame.set("loop.index", t_5 + 1);
frame.set("loop.index0", t_5);
frame.set("loop.revindex", t_6 - t_5);
frame.set("loop.revindex0", t_6 - t_5 - 1);
frame.set("loop.first", t_5 === 0);
frame.set("loop.last", t_5 === t_6 - 1);
frame.set("loop.length", t_6);
output += "\n    ";
if(env.getFilter("length").call(context, runtime.memberLookup((t_30),"entry"))) {
output += "\n      ";
frame = frame.push();
var t_33 = runtime.memberLookup((t_30),"entry");
if(t_33) {var t_32 = t_33.length;
for(var t_31=0; t_31 < t_33.length; t_31++) {
var t_34 = t_33[t_31];
frame.set("txt", t_34);
frame.set("loop.index", t_31 + 1);
frame.set("loop.index0", t_31);
frame.set("loop.revindex", t_32 - t_31);
frame.set("loop.revindex0", t_32 - t_31 - 1);
frame.set("loop.first", t_31 === 0);
frame.set("loop.last", t_31 === t_32 - 1);
frame.set("loop.length", t_32);
output += "\nO ";
output += runtime.suppressValue(t_29, env.opts.autoescape);
output += ".     ";
output += runtime.suppressValue(t_34, env.opts.autoescape);
output += " ";
output += runtime.suppressValue(runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "entry0")),"entry")),"length"), env.opts.autoescape);
output += "\n      ";
;
}
}
frame = frame.pop();
output += "\n    ";
;
}
else {
output += "\nI";
output += runtime.suppressValue(t_29, env.opts.autoescape);
output += ".     ";
output += runtime.suppressValue(runtime.memberLookup((t_30),"entry"), env.opts.autoescape);
output += "\n    ";
;
}
output += "\n    ";
if(runtime.memberLookup((runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "entry")),"occur")),"length") > 0) {
output += "\n      ";
frame = frame.push();
var t_37 = runtime.memberLookup((runtime.contextOrFrameLookup(context, frame, "entry")),"occur");
if(t_37) {var t_35;
if(runtime.isArray(t_37)) {
var t_36 = t_37.length;
for(t_35=0; t_35 < t_37.length; t_35++) {
var t_38 = t_37[t_35][0]
frame.set("oc", t_37[t_35][0]);
var t_39 = t_37[t_35][1]
frame.set("ocent", t_37[t_35][1]);
frame.set("loop.index", t_35 + 1);
frame.set("loop.index0", t_35);
frame.set("loop.revindex", t_36 - t_35);
frame.set("loop.revindex0", t_36 - t_35 - 1);
frame.set("loop.first", t_35 === 0);
frame.set("loop.last", t_35 === t_36 - 1);
frame.set("loop.length", t_36);
output += "\n        ";
frame = frame.push();
var t_42 = t_39;
if(t_42) {var t_41 = t_42.length;
for(var t_40=0; t_40 < t_42.length; t_40++) {
var t_43 = t_42[t_40];
frame.set("txt", t_43);
frame.set("loop.index", t_40 + 1);
frame.set("loop.index0", t_40);
frame.set("loop.revindex", t_41 - t_40);
frame.set("loop.revindex0", t_41 - t_40 - 1);
frame.set("loop.first", t_40 === 0);
frame.set("loop.last", t_40 === t_41 - 1);
frame.set("loop.length", t_41);
output += "\n";
output += runtime.suppressValue(t_29, env.opts.autoescape);
output += "/";
output += runtime.suppressValue(t_38, env.opts.autoescape);
output += ".     ";
output += runtime.suppressValue(t_43, env.opts.autoescape);
output += "\n        ";
;
}
}
frame = frame.pop();
output += "\n      ";
;
}
} else {
t_35 = -1;
var t_36 = runtime.keys(t_37).length;
for(var t_44 in t_37) {
t_35++;
var t_45 = t_37[t_44];
frame.set("oc", t_44);
frame.set("ocent", t_45);
frame.set("loop.index", t_35 + 1);
frame.set("loop.index0", t_35);
frame.set("loop.revindex", t_36 - t_35);
frame.set("loop.revindex0", t_36 - t_35 - 1);
frame.set("loop.first", t_35 === 0);
frame.set("loop.last", t_35 === t_36 - 1);
frame.set("loop.length", t_36);
output += "\n        ";
frame = frame.push();
var t_48 = t_45;
if(t_48) {var t_47 = t_48.length;
for(var t_46=0; t_46 < t_48.length; t_46++) {
var t_49 = t_48[t_46];
frame.set("txt", t_49);
frame.set("loop.index", t_46 + 1);
frame.set("loop.index0", t_46);
frame.set("loop.revindex", t_47 - t_46);
frame.set("loop.revindex0", t_47 - t_46 - 1);
frame.set("loop.first", t_46 === 0);
frame.set("loop.last", t_46 === t_47 - 1);
frame.set("loop.length", t_47);
output += "\n";
output += runtime.suppressValue(t_29, env.opts.autoescape);
output += "/";
output += runtime.suppressValue(t_44, env.opts.autoescape);
output += ".     ";
output += runtime.suppressValue(t_49, env.opts.autoescape);
output += "\n        ";
;
}
}
frame = frame.pop();
output += "\n      ";
;
}
}
}
frame = frame.pop();
output += "\n    ";
;
}
output += "\n  ";
;
}
}
}
frame = frame.pop();
output += "\n";
;
}
}
frame = frame.pop();
output += "\n";
;
}
output += "\n";
if(parentTemplate) {
parentTemplate.rootRenderFunc(env, context, frame, runtime, cb);
} else {
cb(null, output);
}
;
} catch (e) {
  cb(runtime.handleError(e, lineno, colno));
}
}
return {
root: root
};

})();
})();


var SFAFx = (function(){
  var sfafx = {}
  sfafx.parser = sfafx_parser;
  sfafx.toSFAF = sfafx_toSFAF.toSFAF;
  sfafx.toJSON = function( sfafxtxt ){
    return sfafx_parser.parse(sfafxtxt);
  }
  return sfafx;
}());
